Cronología del proyecto

Sección Usuario, Rutas, Métodos y Vistas:
- creación archivo /controllers/LoginController.php
- crear rutas para Login, en el router, /public/index.php
- crear rutas para Crear Cuenta, en el router, /public/index.php
- crear los métodos login(), logout(), crear() en /controllers/LoginController.php
- crear rutas para Olvide mi password, en el router, /public/index.php
- crear rutas para Restablecer password, en el router, /public/index.php
- crear los métodos olvide() y restablecer() en /controllers/LoginController.php
- crear rutas para Mensaje confirmar, en el router, /public/index.php
- crear rutas para Confirmar, en el router, /public/index.php
- crear los métodos mensaje() y confirmar() en /controllers/LoginController.php
- comprobar las urls del router.
- crear las vistas de la sección login, /views/auth/ .php
- crear estilos css en src/scss/auth _.scss

- crear tabla usuarios: id (auto-increment), nombre, email, password, token, confirmado

Sección Crear Cuenta de Usuario:
- crear modelo de Usuario en /models/Usuario.php, respetando las columnas de la tabla usuarios
- sincronizar el modelo Usuario con el $_POST en /controllers/LoginController.php
- asignar los value="<?php echo …?>" a los inputs vista formulario, para no perder los datos en la validación.
- crear método de validación del formulario crear cuenta en /models/Usuario.php
- crear nueva platilla vista alertas (de error o exito) en /view/templates/alertas.php
- insertar la plantilla de alertas con include_once a /views/auth/crear.php
- etilos .scss para los mensajes de error del formulario, en /src/scss/componentes/_alertas.scss
- verificar si el usuario ya existes, antes de crear cuenta nueva. /controller/LoginController.php
- hashear el password, en /models/Usuario.php
- eliminar password2 en /controllers/LoginController.php
- generar un token único en /models/Usuario.php
- guardar el nuevo usuario en la DB y mostrar mensaje, valien /controllers/LoginController.php
- En composer.json, "autload" - "psr-4", agregar "Classes\\" : "./classes"
- Crear una clase para enviar un email de confirmación, con phpmailer. En /clases/Email.php
- Método enviar email, con phpmailer, de confirmación en /classes/Email.php (servidor email mailtrap.io)
- Confirmar la cuenta de usuario creada, leyendo el token de la url /confirmar. /controllers/LoginController.php
- Se el token es ok, asigna 1 a la prop confirmado, elimina el token, elimina la prop password2, guarda el usuario.

Sección olvidé password Usuario:
- validar el email para Resetear password, en /models/Usuario.php
- buscar el usuario por su email, generar nuevo token, eliminar la propiedad password2, actualizar los datos del usuario,
  enviar email con instrucciones (nuevo método), imprimir alerta de éxito, en /controllers/LoginController.php
- crear el método para enviar email con instrucciones y nuevo token en /clases/Email.php
- validar que el token recibido en la url /restablecer, sea válido, en /controllers/LotinController.php
- imprimir alertas de error de token, y ocultar formulario de reestablecer, en views/auth/restablecer.php
- validar el nuevo password, hashearlo, eliminar token y guardar (actualizar) usuario en la DB, redireccionar,
  en controllers/LoginController.php

Sección Login / Logout Usuario:
- validar el login (email y password), desde /controllers/LoginController.php
- revisar que el usuario existe en la DB y está confirmado, en /controllers/LoginController.php
- verificar que la contraseña del formulario es la del usuario de la DB, en LoginController.php
- si la contraseña es correcta iniciar sesión, obtener datos del usuario y redirigir, en LoginController.php


Sección Proyectos:
- crear ruta a dashboard en public/index.php
- crear controller DashboardController.php para los proyectos
- crear nueva vista en view/dashboard/index.php
- crear vista lateral en view/templates/sidebar.php, insertarla en view/dashboard/index.php
- crear barra superior del dashboard, con enalce a cerrar sesión /logout, en view/templates/barra.php
- crear estilos css al dashboard, en src/scss/_index.scss , _dashboard.scss , _sidebar.scss , _barra.scss
- comprobar si el usuario está logueado isAuth(), para proteger la ruta de dashboard de usuarios no logueados,
  en /controllers/DashboardController.php
- cerrar sesión en /controllers/LoginController.php, function logout()
- crear rutas para los end-points crear-proyecto y perfil, en /public/index.php
- crear las vistas header-dashboard.php, footer-dashboard.php, crear-proyecto.php, perfil.php, en views/dashboard/
- crear las funciones crear_proyecto y perfil en /controllers/DashboardController.php
- crear operadores ternarios para la class de los <a href >, en /views/templates/sidebar.php
- crear vista formulario-proyecto.php, en /views/dashboard/
- crear formulario, insertando formulario-proyecto.php, en la vista views/dashboard/crear-proyecto.php
- crear estilos css al formunario, en _dashboard.scss
- crear tabla proyectos (id, proyecto, url, propietarioId ) character_set: utf8mb3 - collation: utf8mb3_unicode_ci
- crear el modelo de proyectos en /models/
- crear ruta post para el formulario de proyectos, en /public/index.php
- validación del formulario proyectos con POST, , método crear_proyecto, en /controllers/DashboardController.php
- si pasa la validación, Generar una url única, almacenar el usuario creador del proyecto, guardar el proyecto , 
  en /controllers/DashboardController.php 
- crear el endpoint get /proyecto en el /public/index.php
- crear el método proyecto, con la validación del usuario, en el /controllers/DashboardCrontoller.php
- crear la vista de proyecto, en /view/dashboard/proyecto.php

- crear nuevo método genérico belongsTo() en /models/ActiveRecord.php, para obtener todos los proyectos del usuario logueado,
  ya que el método where() solo nos retorna el primer elemento encontrado.
- obtener los proyectos del usuario logueado, desde el método index() de DashboardController.php
- comprobar si hay proyectos, iterar y mostrar, el listado de los proyectos del usuario logueado, en /view/dashboard/index.php
- crear estilos css para el listado de proyectos view/dashboard/index.php, en src/css/dashboard/_proyectos.scss

- crear botón para añadir tareas a un proyecto, en view/dashboard/proyecto.php
- crear etilos para las tareas de view/dashboard/proyeto.html, en src/scss/dashboard/_tareas.scss

- agregar JavaScritp para mostrar ventana modal con el formulario tareas, cuando botón Agregar Tarea, en src/js/tareas.js
- el código JS lo agregaremos dentro de funciones IFIE, que se ejecutan automáticamente y protegen sus variables.
- agregar valor a la var php $script en view/dashboard/proyecto.php, para que se ejecute el scirpt en views/layout.php
- crear el formulario html para agregar tareas, en la función mostrarFormulario() en src/scss/tareas.js
- agregar css al modal, en src/scss/dashboard/_modal.scss
- agregar un setTimeout() que agrega la clase animar al formulario, en src/scss/dashboard/tareas.js
- agregar evento click solo al botón cerrar de la ventana modal, en src/js/tareas.js
- agregar css al formulario del modal, en src/scss/dashboard/_modal.scss
- agregar código js y funciones para el botón crear-tarea, src/js/tareas.js

- crear la tabla de tareas (id, nombre, estado, proyectoId) character_set: utf8mb3 - collation: utf8mb3_unicode_ci
- crear modelo para las tareas, en models/Tarea.php
- crear Controller con class vacia, en controllers/TareaController.php
- crear routing para tareas, en public/index.php
- crear los métodos vacios de la class TareaController, en controllers/TareaController.php

Consulta a la API
- crear el objeto FormData() y enviar petición fetch() tipo POST desde el método agregarTarea(), en tareas.js,
  al servidor API en la url (end point) api/tarea, el método crear del controller TareaController.php, responderá a la petición.
- obtener la url del proyecto, que está en la url del navegador como ?id=…., para obtener el id del proyecto
- buscar el proyecto, por la url, en la DB, comprobar si existe y si es del mismo usuario que está logueado
- guardar las tareas del proyecto en la DB
- crear un API para mostrar las tareas cuyo columna proyectoId, contengan el id del proyecto acual, en index() de TareaController.php
- consulta al endpoint api/tareas, para obtener las tareas de un proyecto según su id (url), en src/js/tareas.js
- crear el scripting en src/js/tareas.js, para mostrar las tareas en views/dashboard/proyecto.php
- crear botones para gestionar las tareas, en src/js/tareas.js e insertar tareas y botones en view/dashboard/proyecto.php
- crear estilos para el listado de tareas y botones definidos en src/js/tareas.js, estilos en src/scss/dashboard/_tareas.scss
- mostrar en el listado, la nueva tarea agregada, recargando la página con la técnica virtual DOM, en src/js/tareas.js
- cambiar el estado de una tarea con el botón (teniendo en cuenta el efecto mutación sobre el virtual DOM), en src/js/tareas.js
- crear y enviar la petición fetch() tipo POST al servidor, para actualizar la tarea en la DB, en src/js/tareas.js
- crear la respuesta api para la petición fetch() con method POST, en el método actualizar() de controllers/TareaController.php
- procesar el resultado de la respuesta del api endpoint, en src/js/tareas.js
- cambia el estado de la tarea en el Virtual DOM y vuelve a mostrar las tareas, en src/js/Tareas.js
 
- detectar la tarea a eliminar, mostrar alerta de https://sweetalert2.github.io/, antes de eliminar la tarea, en src/js/tareas.js
- crear la función eliminarTarea() con la consulta fetch() tipo POST a la api enpoint api/tarea/eliminar, en src/js/tareas.js
- procesar el resultado de la respuesta del api endpoint, en src/js/tareas.js
- eliminar la tarea del virtual DOM filtrando las tareas restantes menos la eliminada (filter()), mostrar alerta y recargar
  para mostrar listado de tareas actualizado,  en src/js/tareas.js

- editar las tareas con el mismo formulario de ventana modal que las crea, en src/js/tareas.js
- actualizar las tareas en el servidor y en el virtual DOM, src/js/tareas.js

- formulario de filtro de tareas, con inputs type="radio", todas o pendientes o completadas, en views/dashboard/proyecto.html
- estilos css al formulario de filtros,  en src/scss/dashboard/_filtros.scss
- obtener las tareas según el filtro seleccionado, todas, pendientes o completadas y mostrarlas, en src/js/tareas.js



 
  





 
 























 






